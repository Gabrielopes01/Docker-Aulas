--------------------------Aula inicial de Dockerfile
O Docker Hub contem alguns containners e imagens ja prontas

docker run - Cria um container baseado no nome da imagem
docker run -it ubuntu:latest bash  - Cria um container que roda um bloco de comando bash diretamentes
docker ps - Mostra os containers

Um DockerFile pode criar um container e imagens que não existem no Hub, ele =é um simples arquivo de texto com
comandos ao Docker

Sempre coloque um ponto final no arquivo docker

vim Dockerfile - Cria um arquivo de texto chamado Dockerfile que permite você editar ele
mkdir src - Faz um diretório

Ápós criar um Dockerfile, iremos precisaer cojnstruir seu container e imagem

docker build --tag testando:latest . (Coloque um ponto no final) - Esta tag permite criar um container proprio
com nome e versão, nome: testing e versão: latest

docker run -it testando:latest bash  - Este comando roda o container acima

------------------------------Aula docker-compose
Docker Compose pode criar varios containers ao mesmo tempo atraves de um arquivo chamado docker-compose.yml

touch docker-compose.yml - Cria o arquivo do Compose pelo CMD
code docker-compose.yml  - Abre um arquivo para ser editado em texto
mv Dockerfile nginx.dockerfile  - Copia um arquivo com outro nome e exclui o original
cp Dockerfile nginx.dockerfile   - Copia um arquivo em outro novo, mantendo o original

docker-compose up - Roda o docker-compose.yml quando esta no diretorio, porem inabiliza o cmd
docker-compose up -d - Um comando com detach, que permite voce continuar usando o cmd e roda tudo no fundo
docker-compose up -d --build - Cria os builds proprios do seu docker-compose e inicia tudo
docker-compose down  - Remove os containers do docker-compose

As images estão no Docker Hub

Após o Docker-Compose, todos ficam rdando no fundo até você encerrar eles

Rodamos um compose com php, mysql(Definindo suas variaveis de ambiente) e nginx

docker-compose exec php /bin/sh - Roda um bash de php, desde que esteja no mesmo diretorio
nc -vz mysql 3306  - Comando do bash php que veirfica o banco de dados

------------------------Aula de Nginx

O atributo volumes cria uma pasta em outro local que serve como reflexo do container e guarda certas informações
para não perde-las quando o container for finalizado

Caso o volume do nginx nao esteja funcionando, verifique sua pasta root no bash (docker-compose exec nginx /bin/sh)
e depois acesse a pasta cd /etc/nginx/conf, e então o arquivo cat default.conf para ver sua pasta root, e de exit
do bash, não se esqueça que o arquivo principal deve ser chamado de index.html por convenção

Trocaremos a imagem do nginx no docker-compose.yml por um build para configurações personalizadas
Quando tivermos configurações personalizadas, rodamos:
docker-compose up -d --build



---------Aula de Apache

Adicionamos o apache ao docker-compose.yml

    apache:
        build:
            context: .
            dockerfile: apache.dockerfile
        container_name: apache
        ports:
            - 80:80
            - 443:443
        volumes:
            - ./src:/var/www/html
        networks:
            - laravel

Criamos um apche.dockerfile

FROM httpd:alpine

RUN mkdir -p /var/www/html

Após isto de um up e verifique se funciona

docker-compose exec apache /bin/sh  - Acessar bash do apache

Criamos um apache.dockerfile que troca as configurações do vhost
FROM httpd:alpine

ADD ./apache/httpd-vhosts.conf /usr/local/apache2/conf/extra/httpd-vhosts.conf

RUN mkdir -p /var/www/html

As configurações do Vhost:
<VirtualHost *:80>
    ServerAdmin webmaster@laraveldocker.com
    DocumentRoot "/var/www/html"
    ServerName localhost
    ServerAlias localhost
    ErrorLog "logs/localhost-error.log"
    CustomLog "logs/localhost-access.log" common
</VirtualHost>



-------------------Aula de MySQL
Primeiramente adicionaremos o seguinte ao servioço do mysql

ports:
            - 4306:3306

Isso nos diz que o localhost do banco, se refletira na porta 4306


docker-compose exec mysql /bin/sh - Bloco de comando Mysql

Seguindo as definições do mysql no docker-compose.yml, criamos usando o table plus um BD e para acessar use
o seguinte comando no bash:
mysql -u laravel -p laraveldb - Bash do mysql

Use o comando:
mysql -u laravel (Nome do usuário) -p laraveldb (Nome do banco)
para se conetar ao banco, digite a senha e pronto

Adicionamos volumes para manter a informação do mysql quando o container for fechado:
volumes:
            - ./mysql:/var/lib/mysql



----------------------Aula de PHP

Adicionamos um volume ao PHP:
volumes:
            - ./src:/var/www/html

Para usarmos o Laravel, iremos precisar de extensões como o PDO que não vem por padrão

Então iremos dar um build em nosso container do PHP
        build:
            context: .
            dockerfile: php.dockerfile

e depois criaremos seu dockerfile que ja ira baixar as extensões com o RUN
FROM php:7.4.12-fpm-alpine 

RUN docker-php-ext-install pdo pdo_mysql


Nos ainda poderemos ter problemas com permisões, para evitar isto, adicione as seguintes linhas antes do RUN]



------------------------Aula de Composer
Para se usar o composer com o docker, você pode executar este comando vinculado no php:
docker-compose exec php /usr/local/bin/composer require aschmelyun/larametrics


Ou você pode passar os parameetros diretamente no docker-compose.yml em services:
composer:
        image: composer:latest
        container_name: composer
        volumes:
            - ./src:/var/www/html
        working_dir: /var/www/html
        networks:
            - laravel
 
E caso faça isso, sera necessário adicionar dependencias:

No nginx:
depends_on:
    - php
    - mysql

Esta linha do comando serve para rodar comandos em composer:

docker-compose run --rm composer --version

Criando um projeto laravel na pasta atual:
docker-compose run --rm composer create-project laravel/laravel .

Va até a apsta laravel local do seu src e entre nela
code . - Abre o editor na pasta local



-------------------Configurando Laravel
Primeiranmente abra o console do php:
docker-compose exec php /bin/sh

chown -R www-data:www-data * - Alterar a permissão de tudo

Depois altere as permissões nestan pasta:
chown -R www-data:www-data .

No arquio .env:
- Mude o Nome, URL
- Altere os detalhes do banco:
DB_CONNECTION=mysql
DB_HOST=mysql
DB_PORT=3306
DB_DATABASE=laraveldb
DB_USERNAME=laravel
DB_PASSWORD=secret


Para executar um comando artisan, abra o bash do php:
docker-compose exec php/bin/sh

e veja se funciona:
php artisan --version

Você também pode rodar o comando no cmd diretamente:
docker-compose exec php php /var/www/html/artisan --version


----------------------------------Aula de Arstisan
Uma outra maneira de executar o artisan é usando o comando:
docker-compose run --rm artisan --version

por causa do entrypoint, para não confundirmos com php normal, adiciona as linhas do compose:
entrypoint: ['php', 'artisan']

Neste comando é rodado o artisan primeiramente

Após adiconar as linhas ao documento
    artisan:
        build:
            context: .
            dockerfile: php.dockerfile
        container_name: php
        volumes:
            - ./src:/var/www/html
        working_dir: /var/www/html
        entrypoint: ['php', 'artisan']
        networks:
            - laravel
Entrypoint é uma nova entrade de código que entra no lugar do /bin/sh


----------------------------Aula NPM
Primeiramente vamos adicionar ao projeto o serviço do NPM no compose.yml

    npm:
        image: node:current-alpine
        container_name: npm
        volumes:
            - ./src:/var/www/html
        working_dir: /var/www/html
        entrypoint: ['npm']
        networks:
            -laravel


BLoco de comando do node:
docker-compose run --rm npm -v
docker-compose run --rm npm install

A flag --rm diz que o container sera removido após o uso

------------------Aula de Ciração do APP
Neste aula usamos o artisan para criar uma aplicãção no Laravel com Post e Comments


------------------Uso do PHPUnit

Criando um teste para Posts com unit:
docker-compose run --rm artisan make:test PostTest --unit

e então após inserir as informações, rodamos o teste com:
docker-compose run --rm artisan test


-----------Melhorando o desempenho do Docker local

:delegated - Altera o comportamento dos volumes do Docker

Trocaremos o local dos volumes do compose.yml para os dockerfiles
Removemos o volumes do compose e adicionamos o ADD ./src/ /var/www/html nos dockerfile's


--------------------Mkcert
Uma aplicação que desenvolve certificados locais, uinstale através do comando:
choco install mkcert 

Rode um mkcert install para criar a base no PC e por fim escolha um dominio en rode mkcert + URL para criar um
domínio para esta URL, ele cria um tipo de url temporaria

Alteramos o arquivo default.conf:
server {
    listen 80 default_server;

    server_name _;

    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    index index.php index.html;
    server_name localhost;
    root /var/www/html/public;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass php:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }

    ssl_certificate /etc/nginx/certs/mkcert/laraveldocker.test.pem;
    ssl_certificate_key /etc/nginx/certs/mkcert/laraveldocker.test-key.pem;
}

Adicionado ao dockerfile do nginx
RUN mkdir -p /etc/nginx/certs/mkcert

ADD ./nginx/certs/ /etc/nginx/certs/mkcert

